@using MessageBusSample.Client.Components.Actions.Rename
@using MessageBusSample.Client.Services
@using ReactiveUI
@using MessageBusSample.Client.Components.Actions
@using System.Reactive.Disposables
@using System.Reactive.Linq
@using System.Reactive.Concurrency

@implements IDisposable

@typeparam T where T : IdItem


<MudPaper Class="mud-height-full">
    <MudCard Class="mud-height-full">
        <MudCardHeader>
            <MudText Typo="Typo.subtitle2">
                @Title
            </MudText>
            @if (_isLoading)
            {
                <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="ml-4" />
            }
        </MudCardHeader>
        <MudCardContent>
            <div class="scrollable-list">
                <MudVirtualize Items="@_items">
                    @ListItemContent(context)
                </MudVirtualize>
            </div>
        </MudCardContent>
    </MudCard>
</MudPaper>

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter, EditorRequired]
    public Func<Task<List<T>>> GetItems { get; set; } = default!;

    [Parameter, EditorRequired]
    public RenderFragment<T> ListItemContent { get; set; } = null!;

    private bool _isLoading = false;

    private List<T>? _items;

    private readonly CompositeDisposable _disposables = new CompositeDisposable();

    protected override async Task OnInitializedAsync()
    {
        var deletingSubscription = MessageBus.Current
            .Listen<InitDeleteActionMessage>()
            .SubscribeOn(TaskPoolScheduler.Default)
            .ObserveOn(RxApp.TaskpoolScheduler)
            .Subscribe(async message =>
            {
                if (_items?.Any(x => x.Id == message.EntityId) == true)
                {
                    _isLoading = true;
                    await InvokeAsync(StateHasChanged);
                    Console.WriteLine($"Received InitDeleteActionMessage for {message.EntityId}");
                }
            });

        var deletedSubscription = MessageBus.Current
            .Listen<ResolvedDeleteActionMessage>()
            .SubscribeOn(TaskPoolScheduler.Default)
            .ObserveOn(RxApp.MainThreadScheduler)
            .Subscribe(async message =>
                {
                    if (_items?.Any(x => x.Id == message.EntityId) == true)
                    {
                        await InvokeAsync(ServerData);
                        _isLoading = false;
                        await InvokeAsync(StateHasChanged);
                        Console.WriteLine($"Received ResolvedDeleteActionMessage for {message.EntityId}");
                    }
                });

        var renamedSubscription = MessageBus.Current.Listen<ResolveRenameActionMessage>().Subscribe(async message =>
        {
            if (_items?.Any(x => x.Id == message.EntityId) == true)
                await InvokeAsync(ServerData);
            Console.WriteLine($"Received InitRenameActionMessage for {message.EntityId}");
        });

        _disposables.Add(deletedSubscription);
        _disposables.Add(renamedSubscription);

        _items = await GetItems();

        base.OnInitialized();
    }

    public async Task ServerData()
    {
        _items = await GetItems();
        StateHasChanged();
    }

    public void Dispose()
    {
        // Clean up resources
        _disposables.Dispose();
        Console.WriteLine("Component disposed!");
    }
}
